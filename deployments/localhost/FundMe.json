{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberBackers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30f37a55039892f010fe07c1487c89665a53eeec589af06b459c6d0337bf1a57",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1067649",
    "logsBloom": "0x
    "blockHash": "0x69fb38da06ab225fbc253300f9eda118e97e77bac576e5e5aa73d468aa84cc96",
    "transactionHash": "0x30f37a55039892f010fe07c1487c89665a53eeec589af06b459c6d0337bf1a57",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1067649",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "41e77c92531d0bc1de9d892c4a5ef3d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberBackers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"julienbrs, credit to FreeCodeCamp & Patric Collins\",\"details\":\"This implements price feed in our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funding the contract\"}},\"notice\":\"You can use this contract for basic crowd funding and keeping tracks of donators\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner(); //coding style for error: Contract_Error()\\n\\n/**\\n * @title A contract for crowd funding\\n * @author julienbrs, credit to FreeCodeCamp & Patric Collins\\n * @notice You can use this contract for basic crowd funding and keeping tracks of donators\\n * @dev This implements price feed in our library\\n *\\n */\\ncontract FundMe {\\n    /* Type declaration */\\n    using PriceConverter for uint256;\\n\\n    /* State Variables */\\n    mapping(address => uint256) private s_addressToAmountFunded; //s_Name for storage variable\\n    address[] private s_funders;\\n    uint256 amountFounded;\\n\\n    address private immutable i_owner; // i_immutable\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    /* Modifiers */\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    /* Functions */\\n\\n    constructor(address priceFeedAdress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAdress);\\n        amountFounded = 0;\\n    }\\n\\n    /**\\n     * @notice Funding the contract\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        amountFounded += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        // we read in storage only once, then we read in memory.\\n        // /!\\\\ We can't put mapping in memory\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getAmountFunded() public view returns (uint256) {\\n        return amountFounded;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getNumberBackers() public view returns (uint256) {\\n        return s_funders.length;\\n    }\\n}\\n\",\"keccak256\":\"0x280f43a924cf9428044ff51a2f4338d553cabb5e90f97a9ce4537716a7c9aba4\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xfd2cfd63e8ffd5b71bedf9021381e58fc19065c3d5ded28242d615fbadd6372f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200137538038062001375833981810160405281019062000037919062000128565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600281905550506200015a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f082620000c3565b9050919050565b6200010281620000e3565b81146200010e57600080fd5b50565b6000815190506200012281620000f7565b92915050565b600060208284031215620001415762000140620000be565b5b6000620001518482850162000111565b91505092915050565b60805160601c6111e76200018e60003960008181610266015281816104c201528181610665015261085b01526111e76000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101d557610091565b80630343fb25146100965780632c5b11fb146100d35780633ccfd60b146100fe578063666bfff5146101155780636b69a59214610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610b1f565b610212565b6040516100ca9190610b65565b60405180910390f35b3480156100df57600080fd5b506100e861025a565b6040516100f59190610b65565b60405180910390f35b34801561010a57600080fd5b50610113610264565b005b34801561012157600080fd5b5061012a6104a4565b6040516101379190610b65565b60405180910390f35b34801561014c57600080fd5b506101556104b1565b6040516101629190610b65565b60405180910390f35b34801561017757600080fd5b506101806104be565b60405161018d9190610b8f565b60405180910390f35b3480156101a257600080fd5b506101ab6104e6565b6040516101b89190610c09565b60405180910390f35b6101c9610510565b005b6101d3610663565b005b3480156101e157600080fd5b506101fc60048036038101906101f79190610c50565b6108f1565b6040516102099190610b8f565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103945760006001828154811061030f5761030e610c7d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061038c90610cdb565b9150506102ec565b50600067ffffffffffffffff8111156103b0576103af610d24565b5b6040519080825280602002602001820160405280156103de5781602001602082028036833780820191505090505b50600190805190602001906103f4929190610a15565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161041b90610d84565b60006040518083038185875af1925050503d8060008114610458576040519150601f19603f3d011682016040523d82523d6000602084013e61045d565b606091505b50509050806104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049890610df6565b60405180910390fd5b50565b6000600180549050905090565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061054f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461093990919063ffffffff16565b1015610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058790610e62565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105de9190610e82565b9250508190555034600260008282546105f79190610e82565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561076c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610722575b5050505050905060005b81518110156107f657600082828151811061079457610793610c7d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ee90610cdb565b915050610776565b50600067ffffffffffffffff81111561081257610811610d24565b5b6040519080825280602002602001820160405280156108405781602001602082028036833780820191505090505b5060019080519060200190610856929190610a15565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161089d90610d84565b60006040518083038185875af1925050503d80600081146108da576040519150601f19603f3d011682016040523d82523d6000602084013e6108df565b606091505b50509050806108ed57600080fd5b5050565b60006001828154811061090757610906610c7d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061094583610975565b90506000670de0b6b3a7640000858361095e9190610ed8565b6109689190610f61565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f6919061101f565b5050509150506402540be40081610a0d919061109a565b915050919050565b828054828255906000526020600020908101928215610a8e579160200282015b82811115610a8d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a35565b5b509050610a9b9190610a9f565b5090565b5b80821115610ab8576000816000905550600101610aa0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aec82610ac1565b9050919050565b610afc81610ae1565b8114610b0757600080fd5b50565b600081359050610b1981610af3565b92915050565b600060208284031215610b3557610b34610abc565b5b6000610b4384828501610b0a565b91505092915050565b6000819050919050565b610b5f81610b4c565b82525050565b6000602082019050610b7a6000830184610b56565b92915050565b610b8981610ae1565b82525050565b6000602082019050610ba46000830184610b80565b92915050565b6000819050919050565b6000610bcf610bca610bc584610ac1565b610baa565b610ac1565b9050919050565b6000610be182610bb4565b9050919050565b6000610bf382610bd6565b9050919050565b610c0381610be8565b82525050565b6000602082019050610c1e6000830184610bfa565b92915050565b610c2d81610b4c565b8114610c3857600080fd5b50565b600081359050610c4a81610c24565b92915050565b600060208284031215610c6657610c65610abc565b5b6000610c7484828501610c3b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce682610b4c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d1957610d18610cac565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d6e600083610d53565b9150610d7982610d5e565b600082019050919050565b6000610d8f82610d61565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610de0600b83610d99565b9150610deb82610daa565b602082019050919050565b60006020820190508181036000830152610e0f81610dd3565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e4c601b83610d99565b9150610e5782610e16565b602082019050919050565b60006020820190508181036000830152610e7b81610e3f565b9050919050565b6000610e8d82610b4c565b9150610e9883610b4c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ecd57610ecc610cac565b5b828201905092915050565b6000610ee382610b4c565b9150610eee83610b4c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2757610f26610cac565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6c82610b4c565b9150610f7783610b4c565b925082610f8757610f86610f32565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fb181610f92565b8114610fbc57600080fd5b50565b600081519050610fce81610fa8565b92915050565b6000819050919050565b610fe781610fd4565b8114610ff257600080fd5b50565b60008151905061100481610fde565b92915050565b60008151905061101981610c24565b92915050565b600080600080600060a0868803121561103b5761103a610abc565b5b600061104988828901610fbf565b955050602061105a88828901610ff5565b945050604061106b8882890161100a565b935050606061107c8882890161100a565b925050608061108d88828901610fbf565b9150509295509295909350565b60006110a582610fd4565b91506110b083610fd4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110ef576110ee610cac565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561112c5761112b610cac565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561116957611168610cac565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111a6576111a5610cac565b5b82820290509291505056fea2646970667358221220cebe1ccb50851279765f7c0614380064cdfb9a7727db0ba4a5fcd4005610d47364736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101d557610091565b80630343fb25146100965780632c5b11fb146100d35780633ccfd60b146100fe578063666bfff5146101155780636b69a59214610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610b1f565b610212565b6040516100ca9190610b65565b60405180910390f35b3480156100df57600080fd5b506100e861025a565b6040516100f59190610b65565b60405180910390f35b34801561010a57600080fd5b50610113610264565b005b34801561012157600080fd5b5061012a6104a4565b6040516101379190610b65565b60405180910390f35b34801561014c57600080fd5b506101556104b1565b6040516101629190610b65565b60405180910390f35b34801561017757600080fd5b506101806104be565b60405161018d9190610b8f565b60405180910390f35b3480156101a257600080fd5b506101ab6104e6565b6040516101b89190610c09565b60405180910390f35b6101c9610510565b005b6101d3610663565b005b3480156101e157600080fd5b506101fc60048036038101906101f79190610c50565b6108f1565b6040516102099190610b8f565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103945760006001828154811061030f5761030e610c7d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061038c90610cdb565b9150506102ec565b50600067ffffffffffffffff8111156103b0576103af610d24565b5b6040519080825280602002602001820160405280156103de5781602001602082028036833780820191505090505b50600190805190602001906103f4929190610a15565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161041b90610d84565b60006040518083038185875af1925050503d8060008114610458576040519150601f19603f3d011682016040523d82523d6000602084013e61045d565b606091505b50509050806104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049890610df6565b60405180910390fd5b50565b6000600180549050905090565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061054f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461093990919063ffffffff16565b1015610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058790610e62565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105de9190610e82565b9250508190555034600260008282546105f79190610e82565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561076c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610722575b5050505050905060005b81518110156107f657600082828151811061079457610793610c7d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ee90610cdb565b915050610776565b50600067ffffffffffffffff81111561081257610811610d24565b5b6040519080825280602002602001820160405280156108405781602001602082028036833780820191505090505b5060019080519060200190610856929190610a15565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161089d90610d84565b60006040518083038185875af1925050503d80600081146108da576040519150601f19603f3d011682016040523d82523d6000602084013e6108df565b606091505b50509050806108ed57600080fd5b5050565b60006001828154811061090757610906610c7d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061094583610975565b90506000670de0b6b3a7640000858361095e9190610ed8565b6109689190610f61565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f6919061101f565b5050509150506402540be40081610a0d919061109a565b915050919050565b828054828255906000526020600020908101928215610a8e579160200282015b82811115610a8d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a35565b5b509050610a9b9190610a9f565b5090565b5b80821115610ab8576000816000905550600101610aa0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aec82610ac1565b9050919050565b610afc81610ae1565b8114610b0757600080fd5b50565b600081359050610b1981610af3565b92915050565b600060208284031215610b3557610b34610abc565b5b6000610b4384828501610b0a565b91505092915050565b6000819050919050565b610b5f81610b4c565b82525050565b6000602082019050610b7a6000830184610b56565b92915050565b610b8981610ae1565b82525050565b6000602082019050610ba46000830184610b80565b92915050565b6000819050919050565b6000610bcf610bca610bc584610ac1565b610baa565b610ac1565b9050919050565b6000610be182610bb4565b9050919050565b6000610bf382610bd6565b9050919050565b610c0381610be8565b82525050565b6000602082019050610c1e6000830184610bfa565b92915050565b610c2d81610b4c565b8114610c3857600080fd5b50565b600081359050610c4a81610c24565b92915050565b600060208284031215610c6657610c65610abc565b5b6000610c7484828501610c3b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce682610b4c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d1957610d18610cac565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d6e600083610d53565b9150610d7982610d5e565b600082019050919050565b6000610d8f82610d61565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610de0600b83610d99565b9150610deb82610daa565b602082019050919050565b60006020820190508181036000830152610e0f81610dd3565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e4c601b83610d99565b9150610e5782610e16565b602082019050919050565b60006020820190508181036000830152610e7b81610e3f565b9050919050565b6000610e8d82610b4c565b9150610e9883610b4c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ecd57610ecc610cac565b5b828201905092915050565b6000610ee382610b4c565b9150610eee83610b4c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2757610f26610cac565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6c82610b4c565b9150610f7783610b4c565b925082610f8757610f86610f32565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fb181610f92565b8114610fbc57600080fd5b50565b600081519050610fce81610fa8565b92915050565b6000819050919050565b610fe781610fd4565b8114610ff257600080fd5b50565b60008151905061100481610fde565b92915050565b60008151905061101981610c24565b92915050565b600080600080600060a0868803121561103b5761103a610abc565b5b600061104988828901610fbf565b955050602061105a88828901610ff5565b945050604061106b8882890161100a565b935050606061107c8882890161100a565b925050608061108d88828901610fbf565b9150509295509295909350565b60006110a582610fd4565b91506110b083610fd4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110ef576110ee610cac565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561112c5761112b610cac565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561116957611168610cac565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111a6576111a5610cac565b5b82820290509291505056fea2646970667358221220cebe1ccb50851279765f7c0614380064cdfb9a7727db0ba4a5fcd4005610d47364736f6c63430008080033",
  "devdoc": {
    "author": "julienbrs, credit to FreeCodeCamp & Patric Collins",
    "details": "This implements price feed in our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funding the contract"
      }
    },
    "notice": "You can use this contract for basic crowd funding and keeping tracks of donators",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "amountFounded",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 76,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}